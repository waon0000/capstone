7. 데이터 증강
datagen = ImageDataGenerator(
    rotation_range=30,
    width_shift_range=0.3,
    height_shift_range=0.3,
    shear_range=0.3,
    zoom_range=0.3,
    horizontal_flip=True,
    fill_mode='nearest'
)
train_augmented_flow = datagen.flow(train_images, train_labels, batch_size=len(train_images), shuffle=False)
train_images_augmented, train_labels_augmented = next(train_augmented_flow)

train_images_augmented = np.concatenate([train_images, train_images_augmented])
train_labels_augmented = np.concatenate([train_labels, train_labels_augmented])

ImageDataGenerator를 사용해 이미지의 회전, 이동, 확대/축소 등 다양한 변환을 통해 데이터셋의 다양성을 높임
증강된 이미지를 원본 이미지와 함께 합쳐서 훈련 데이터를 더 풍부하게 만듦

8. EfficientNetB0 모델 준비 및 일부 레이어 해제
base_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
for layer in base_model.layers[-20:]:
    layer.trainable = True

EfficientNetB0 모델 사용
사전 학습된 EfficientNetB0 모델을 로드하고 최상단의 레이어는 제외(include_top=False)하여 특징 추출 용도로 사용
전이 학습(Transfer Learning): 마지막 20개의 레이어를 훈련 가능하도록 설정하여 Fine-tuning을 수행합니다. 이 방법은 데이터셋에 맞게 모델의 일부를 조정하여 성능을 극대화
